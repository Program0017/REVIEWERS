generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int      @id @default(autoincrement())
  username         String   @unique
  email            String   @unique
  password_hash    String
  profile_picture_url String
  bio              String
  registration_date DateTime @default(now())
  updated_date     DateTime?
  last_login       DateTime?
  tags             String
  itsActive        Boolean  @default(true)
  itsReported      Boolean  @default(false)
  points           Int      @default(0)

  reviews          Review[]        // Reseñas escritas por el usuario
  reports          Report[]        // Reportes realizados por el usuario
  Referral Referral[] @relation("Referrer")
  Vote Vote[]

  Reward Reward[] @relation("UserRewards")
}

model Review {
  review_id      Int      @id @default(autoincrement())
  user_id        Int
  user           User     @relation(fields: [user_id], references: [user_id])
  business_id    Int
  business       Business  @relation(fields: [business_id], references: [business_id])
  rating         Int
  title          String
  content        String
  image_url      String?  // La imagen no es obligatoria
  tags           String
  wasValidated   Boolean
  creation_date  DateTime @default(now())
  updated_date   DateTime @updatedAt
  helpful_votes  Int      @default(0)
  itsHided       Boolean  @default(false)
  itsReported    Boolean  @default(false)

  reports        Report[]  // Reportes de la reseña
  Vote Vote[]
}

model Business {
  business_id     Int      @id @default(autoincrement())
  name            String   @unique
  location        String
  category        String
  average_rating  Float    @default(0.00)
  total_reviews   Int      @default(0)
  contact_info    String
  creation_date   DateTime @default(now())
  updated_date    DateTime @updatedAt
  tags            String
  itsActive       Boolean  @default(true)
  itsReported      Boolean  @default(false)

  reviews         Review[] // Relación con Review
}

model Vote {
  vote_id        Int      @id @default(autoincrement())
  review_id      Int
  user_id        Int
  isHelpful      Boolean   // Indica si el voto es útil
  creation_date  DateTime @default(now())

  review         Review    @relation(fields: [review_id], references: [review_id])
  user           User      @relation(fields: [user_id], references: [user_id])
}

model Reward {
  reward_id          Int      @id @default(autoincrement())
  points_needed      Int
  reward_description String
  is_redeemed        Boolean  @default(false)
  creation_date      DateTime @default(now())
  redeemed_date      DateTime?
  expiration_date    DateTime // Fecha de expiración de la recompensa
  type               String   // Tipo de recompensa (p. ej., comida, viaje)
  itsAvailable Boolean @default(true)

  users User[] @relation("UserRewards")

}

model Report {
  id          Int      @id @default(autoincrement())
  userId      Int
  reviewId    Int
  reason      String
  isActive    Boolean  @default(false)
  reportDate  DateTime @default(now())
  review      Review   @relation(fields: [reviewId], references: [review_id])
  user        User     @relation(fields: [userId], references: [user_id])
}

model Referral {
  id          Int      @id @default(autoincrement())
  referrer_id Int      // ID del usuario que hace la invitación
  referred_id Int      // ID del amigo invitado
  creation_date DateTime @default(now())

  referrer    User     @relation("Referrer", fields: [referrer_id], references: [user_id])
}
